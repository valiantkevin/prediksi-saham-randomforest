from django.db import models

# Create your models here.

class Stocks(models.Model):
    ticker = models.CharField(max_length=5, default='STOCK',)
    date = models.DateField()
    open = models.IntegerField()
    high = models.IntegerField()
    low = models.IntegerField()
    close = models.IntegerField()
    volume = models.IntegerField()
    after1 = models.IntegerField()
    after5 = models.IntegerField()
    after20 = models.IntegerField()
    plain1 = models.IntegerField()
    plain5 = models.IntegerField()
    plain20 = models.IntegerField()
    grouped1 = models.IntegerField()
    grouped5 = models.IntegerField()
    grouped20 = models.IntegerField()
    onehot1 = models.IntegerField()
    onehot5 = models.IntegerField()
    onehot20 = models.IntegerField()
    
class PlainStocks(models.Model):
    ticker = models.CharField(max_length=5, default='STOCK',)
    date = models.DateField()
    open = models.IntegerField()
    high = models.IntegerField()
    low = models.IntegerField()
    close = models.IntegerField()
    volume = models.IntegerField()
    obv = models.FloatField()
    co = models.FloatField()
    macd = models.FloatField()
    signal = models.FloatField()
    histogram = models.FloatField()
    bollinger_high = models.FloatField()
    bollinger_low = models.FloatField()

class GroupedStocks(models.Model):
    ticker = models.CharField(max_length=5, default='STOCK',)
    date = models.DateField()
    obv_comparison = models.IntegerField()
    obv_position = models.IntegerField()
    co_comparison = models.IntegerField()
    co_position = models.IntegerField()
    macd_comparison = models.IntegerField()
    macd_position = models.IntegerField()
    signal_comparison = models.IntegerField()
    signal_position = models.IntegerField()
    histogram_comparison = models.IntegerField()
    histogram_position = models.IntegerField()
    bb_condition = models.IntegerField()

class OneHotStocks(models.Model):
    ticker = models.CharField(max_length=5, default='STOCK',)
    date = models.DateField()
    obv_comparison_naik = models.IntegerField()
    obv_comparison_tetap = models.IntegerField()
    obv_comparison_turun = models.IntegerField()
    obv_position_positif = models.IntegerField()
    obv_position_negatif = models.IntegerField()
    obv_position_nol = models.IntegerField()
    co_position_positif = models.IntegerField()
    co_position_negatif = models.IntegerField()
    co_position_nol = models.IntegerField()
    co_comparison_naik = models.IntegerField()
    co_comparison_turun = models.IntegerField()
    co_comparison_tetap = models.IntegerField()
    macd_position_positif = models.IntegerField()
    macd_position_negatif = models.IntegerField()
    macd_position_nol = models.IntegerField()
    macd_comparison_naik = models.IntegerField()
    macd_comparison_turun = models.IntegerField()
    macd_comparison_tetap = models.IntegerField()
    signal_position_positif = models.IntegerField()
    signal_position_negatif = models.IntegerField()
    signal_position_nol = models.IntegerField()
    signal_comparison_naik = models.IntegerField()
    signal_comparison_turun = models.IntegerField()
    signal_comparison_tetap = models.IntegerField()
    histogram_position_positif = models.IntegerField()
    histogram_position_negatif = models.IntegerField()
    histogram_position_nol = models.IntegerField()
    histogram_comparison_naik = models.IntegerField()
    histogram_comparison_turun = models.IntegerField()
    histogram_comparison_tetap = models.IntegerField()
    bb_condition_overbought = models.IntegerField()
    bb_condition_oversold = models.IntegerField()
    bb_condition_normal = models.IntegerField()